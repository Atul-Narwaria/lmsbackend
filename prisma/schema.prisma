generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "users", "locations", "students", "teacher", "classroom", "library", "accounts", "activity", "school", "website", "blogs", "courses", "products", "sales", "exam"]
}

model designation {
  id        String      @id @default(uuid()) @db.Uuid
  roles     String      @unique
  status    Boolean
  createAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  salesTeam salesTeam[]

  @@schema("public")
}

model country {
  id                  String                @id @default(uuid()) @db.Uuid
  CounrtyName         String                @unique
  status              Boolean
  createAt            DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  state               state[]
  studentAddress      studentAddress[]
  teacherAddress      teacherAddress[]
  salesTeamAddress    salesTeamAddress[]
  schoolMasterAddress schoolMasterAddress[]

  @@schema("locations")
}

model state {
  id                  String                @id @default(uuid()) @db.Uuid
  stateName           String                @unique
  country             country               @relation(fields: [fkCountryId], references: [id])
  fkCountryId         String                @db.Uuid
  status              Boolean
  createAt            DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  city                city[]
  studentAddress      studentAddress[]
  teacherAddress      teacherAddress[]
  salesTeamAddress    salesTeamAddress[]
  schoolMasterAddress schoolMasterAddress[]

  @@index([fkCountryId])
  @@schema("locations")
}

model city {
  id                  String                @id @default(uuid()) @db.Uuid
  cityName            String
  state               state                 @relation(fields: [fkstateId], references: [id])
  fkstateId           String                @db.Uuid
  status              Boolean
  createAt            DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  studentAddress      studentAddress[]
  teacherAddress      teacherAddress[]
  salesTeamAddress    salesTeamAddress[]
  schoolMasterAddress schoolMasterAddress[]

  @@index([fkstateId])
  @@schema("locations")
}

model admin {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  status    Boolean
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("users")
}

model salesTeam {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String
  email              String               @unique
  phone              String               @unique
  password           String
  dob                DateTime             @db.Date
  designation        designation          @relation(fields: [fkdesignationId], references: [id])
  fkdesignationId    String               @db.Uuid
  status             Boolean
  createAt           DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  salesTeamDocuments salesTeamDocuments[]
  salesTeamAddress   salesTeamAddress[]
  schoolMaster       schoolMaster[]
  TeacherTagging     TeacherTagging[]

  @@schema("sales")
}

model salesTeamDocuments {
  id            String    @id @default(uuid()) @db.Uuid
  salesTeam     salesTeam @relation(fields: [fksalesTeamId], references: [id])
  fksalesTeamId String    @db.Uuid
  category      String
  url           String
  status        Boolean
  createAt      DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@schema("sales")
}

model salesTeamAddress {
  id            String    @id @default(uuid()) @db.Uuid
  salesTeam     salesTeam @relation(fields: [fksalesTeamId], references: [id])
  fksalesTeamId String    @db.Uuid
  country       country   @relation(fields: [fkcountryId], references: [id])
  fkcountryId   String    @db.Uuid
  state         state     @relation(fields: [fkstateId], references: [id])
  fkstateId     String    @db.Uuid
  city          city      @relation(fields: [fkcityId], references: [id])
  fkcityId      String    @db.Uuid
  Address       String
  status        Boolean
  createAt      DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@schema("teacher")
}

model schoolBoard {
  id           String         @id @default(uuid()) @db.Uuid
  boardname    String         @unique
  status       Boolean
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  schoolMaster schoolMaster[]

  @@schema("school")
}

model schoolType {
  id           String         @id @default(uuid()) @db.Uuid
  schoolType   String         @unique
  status       Boolean
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  schoolMaster schoolMaster[]

  @@schema("school")
}

model schoolMaster {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  afflicationCode     String
  schoolType          schoolType            @relation(fields: [fkSchoolType], references: [id])
  fkSchoolType        String                @db.Uuid
  schoolBoard         schoolBoard           @relation(fields: [fkschoolBoard], references: [id])
  fkschoolBoard       String                @db.Uuid
  salesTeam           salesTeam             @relation(fields: [fksalesTeamId], references: [id])
  fksalesTeamId       String                @db.Uuid
  status              Boolean
  createAt            DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  schoolMasterAddress schoolMasterAddress[]
  TeacherTagging      TeacherTagging[]

  @@schema("school")
}

model schoolMasterAddress {
  id          String       @id @default(uuid()) @db.Uuid
  schoolId    schoolMaster @relation(fields: [fkSchoolId], references: [id])
  fkSchoolId  String       @db.Uuid
  country     country      @relation(fields: [fkcountryId], references: [id])
  fkcountryId String       @db.Uuid
  state       state        @relation(fields: [fkstateId], references: [id])
  fkstateId   String       @db.Uuid
  city        city         @relation(fields: [fkcityId], references: [id])
  fkcityId    String       @db.Uuid
  Address     String
  status      Boolean
  createAt    DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@schema("school")
}

model classmaster {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @unique
  status         Boolean
  createAt       DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  questionMaster questionMaster[]

  @@schema("public")
}

model Subjectmaster {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @unique
  status         Boolean
  createAt       DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  questionMaster questionMaster[]

  @@schema("public")
}

model studentMaster {
  id          String   @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  email       String   @unique
  phone       String   @unique
  password    String
  dob         DateTime @db.Date
  admissionId String   @unique
  rollNo      String

  profileImg String

  status         Boolean
  createAt       DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  studentDetail  studentDocuments[]
  studentAddress studentAddress[]
  studentParents studentParents[]

  @@schema("students")
}

model studentParents {
  id          String        @id @default(uuid()) @db.Uuid
  StudentId   studentMaster @relation(fields: [fkStudentId], references: [id])
  fkStudentId String        @db.Uuid
  name        String
  relation    String
  phone       String        @unique
  email       String        @unique
  status      Boolean
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("students")
}

model studentDocuments {
  id          String        @id @default(uuid()) @db.Uuid
  StudentId   studentMaster @relation(fields: [fkStudentId], references: [id])
  fkStudentId String        @db.Uuid
  category    String
  docUrl      String
  status      Boolean
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("students")
}

model studentAddress {
  id          String        @id @default(uuid()) @db.Uuid
  StudentId   studentMaster @relation(fields: [fkStudentId], references: [id])
  fkStudentId String        @db.Uuid
  country     country       @relation(fields: [fkcountryId], references: [id])
  fkcountryId String        @db.Uuid
  state       state         @relation(fields: [fkstateId], references: [id])
  fkstateId   String        @db.Uuid
  city        city          @relation(fields: [fkcityId], references: [id])
  fkcityId    String        @db.Uuid
  Address     String
  status      Boolean
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("students")
}

model teacherMaster {
  id               String             @id @default(uuid()) @db.Uuid
  firstName        String
  lastName         String
  email            String             @unique
  phone            String             @unique
  password         String
  gender           String
  dob              DateTime           @db.Date
  profileImg       String
  joiningDate      DateTime           @db.Date
  status           Boolean
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  teacherDocuments teacherDocuments[]
  teacherAddress   teacherAddress[]
  teacherExprience teacherExprience[]
  TeacherTagging   TeacherTagging[]

  @@schema("teacher")
}

model teacherExprience {
  id          String        @id @default(uuid()) @db.Uuid
  TeacherId   teacherMaster @relation(fields: [fkTeacherId], references: [id])
  fkTeacherId String        @db.Uuid
  skills      Json[]
  experience  String
  status      Boolean
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("teacher")
}

model teacherDocuments {
  id          String        @id @default(uuid()) @db.Uuid
  TeacherId   teacherMaster @relation(fields: [fkTeacherId], references: [id])
  fkTeacherId String        @db.Uuid
  category    String
  docUrl      String
  status      Boolean
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("teacher")
}

model TeacherTagging {
  id            String        @id @default(uuid()) @db.Uuid
  fkTeacherId   String        @db.Uuid
  teacherMaster teacherMaster @relation(fields: [fkTeacherId], references: [id])
  fkSchoolId    String        @db.Uuid
  schoolMaster  schoolMaster  @relation(fields: [fkSchoolId], references: [id])
  createAt      DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  salesTeam     salesTeam?    @relation(fields: [salesTeamId], references: [id])
  salesTeamId   String?       @db.Uuid

  @@unique([fkSchoolId, fkTeacherId])
  @@index([fkSchoolId])
  @@schema("teacher")
}

model teacherAddress {
  id          String        @id @default(uuid()) @db.Uuid
  TeacherId   teacherMaster @relation(fields: [fkTeacherId], references: [id])
  fkTeacherId String        @db.Uuid
  country     country       @relation(fields: [fkcountryId], references: [id])
  fkcountryId String        @db.Uuid
  state       state         @relation(fields: [fkstateId], references: [id])
  fkstateId   String        @db.Uuid
  city        city          @relation(fields: [fkcityId], references: [id])
  fkcityId    String        @db.Uuid
  Address     String
  status      Boolean
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("teacher")
}

model schoolLogin {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  status    Boolean
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("school")
}

model questionMaster {
  id            String         @id @default(uuid()) @db.Uuid
  fk_class_id   String         @db.Uuid
  classMaster   classmaster    @relation(fields: [fk_class_id], references: [id])
  fk_subject_id String         @db.Uuid
  subjectMaster Subjectmaster  @relation(fields: [fk_subject_id], references: [id])
  category      String
  chapter       Int
  question      String
  status        Boolean        @default(true)
  createAt      DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  answerMaster  answerMaster[]

  @@unique([fk_class_id, fk_subject_id, category, chapter, question])
  @@index([fk_subject_id])
  @@schema("exam")
}

model answerMaster {
  id             String         @id @default(uuid()) @db.Uuid
  fk_question_id String         @db.Uuid
  questionMaster questionMaster @relation(fields: [fk_question_id], references: [id])
  option         String
  createAt       DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([fk_question_id])
  @@schema("exam")
}
